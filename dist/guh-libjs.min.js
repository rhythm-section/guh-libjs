!function(){"use strict";function config(){}angular.module("guh.logging.hooks",[]).config(config),config.$inject=[]}(),function(){"use strict";function guhLoggingHttpHook(){function _checkParameter(parameterName,parameter){try{if(!angular.isDefined(parameter)||null===parameter)throw"The parameter "+parameterName+" has to be defined.";if(!angular.isString(parameter))throw"The value of "+parameterName+" has to be a string."}catch(error){return}}function _setServerAddress(){locationServer=locationProtocol+"//"+locationHost+":"+locationPort}function $get($http){return function(logObject){$http.post(locationServer,{data:logObject}).then(function(response){console.log("Data successfully sent.",{payload:logObject,response:response})})["catch"](function(error){console.log("Data not sent.",{payload:logObject,error:error})})}}function setProtocol(protocol){_checkParameter("protocol",protocol),locationProtocol=protocol,_setServerAddress()}function setHostname(hostname){_checkParameter("hostname",hostname),locationHost=hostname,_setServerAddress()}function setPort(port){_checkParameter("port",port),locationPort=port,_setServerAddress()}function getServer(){return locationServer}var locationProtocol=location.protocol,locationHost=location.hostname,locationPort=location.port,locationServer=locationProtocol+"//"+locationHost+":"+locationPort,provider={$get:["$http",$get],getServer:getServer,setProtocol:setProtocol,setHostname:setHostname,setPort:setPort};return provider}angular.module("guh.logging.hooks").provider("guhLoggingHttpHook",guhLoggingHttpHook)}(),function(){"use strict";function guhLoggingBroadcastHook(){function $get($rootScope){return function(logObject){var type=logObject.type?logObject.type:null,argsArray=logObject.args?[].slice.call(logObject.args):null;if(angular.isArray(argsArray))switch(argsArray.length){case 1:angular.isString(argsArray[0])||$rootScope.$broadcast("notification",{type:type,args:argsArray[0]});break;case 2:$rootScope.$broadcast("notification",{type:type,context:argsArray[0],args:argsArray[1]});break;default:console.log("Wrong number of arguments.",logObject.type,logObject.args,argsArray.length)}}}var provider={$get:["$rootScope",$get]};return provider}angular.module("guh.logging.hooks").provider("guhLoggingBroadcastHook",guhLoggingBroadcastHook)}(),function(){"use strict";function config(){}angular.module("guh.vendor",[]).config(config),config.$inject=[]}(),function(){"use strict";function lodashService($log,$window){return $window._||$log.error("guh.vendor.lodashService:factory","_ is not defined on window object"),$window._}angular.module("guh.vendor").factory("_",lodashService),lodashService.$inject=["$log","$window"]}(),function(){"use strict";function localforageService($log,$window){return $window.localforage||$log.error("guh.vendor.localforageService:factory","localforage is not defined on window object"),$window.localforage}angular.module("guh.vendor").factory("localforage",localforageService),localforageService.$inject=["$log","$window"]}(),function(){"use strict";function config(){}angular.module("guh.utils",[]).config(config),config.$inject=[]}(),function(){"use strict";function LocalForage($log){var LocalForage={localForageAdapter:new DSLocalForageAdapter,localForageStore:new JSData.DS};return LocalForage}angular.module("guh.utils").factory("LocalForage",LocalForage),LocalForage.$inject=["$log"]}(),function(){"use strict";function FileFactory($log,$templateCache){function checkFile(path,file){var cacheObject=$templateCache.get(path+file);return void 0!==cacheObject}var File={checkFile:checkFile};return File}angular.module("guh.utils").factory("File",FileFactory),FileFactory.$inject=["$log","$templateCache"]}(),function(){"use strict";function config(DSProvider){DSProvider.defaults.debug=!1}angular.module("guh.models",["js-data"]).config(config),config.$inject=["DSProvider"]}(),function(){"use strict";function DSVendorFactory($log,$q,DS,apiService){function load(){return apiService.send({method:"Devices.GetSupportedVendors"}).then(function(data){return DSVendor.inject(data.vendors),DSVendor.getAll()})}var DSVendor=DS.defineResource({endpoint:"vendors",idAttribute:"id",name:"vendor",relations:{hasMany:{deviceClass:{localField:"deviceClasses",foreignKey:"vendorId"}}},computed:{},methods:{}});return angular.extend(DSVendor,{load:load}),DSVendor}angular.module("guh.models").factory("DSVendor",DSVendorFactory).run(function(DSVendor){}),DSVendorFactory.$inject=["$log","$q","DS","apiService"]}(),function(){"use strict";function DSStateTypeFactory($log,DS){function _addUiData(resource,attrs){var regExp=/\s\[([^)]+)\]/,searchUnit=name.replace(regExp,""),phrase=attrs.name;regExp.test(name)&&(phrase=searchUnit),attrs.phrase="When value of "+phrase}var DSStateType=DS.defineResource({endpoint:"statetypes",idAttribute:"id",name:"stateType",relations:{hasMany:{deviceClassStateType:{localField:"deviceClassStateTypes",foreignKey:"stateTypeId"}}},computed:{},methods:{},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSStateType}angular.module("guh.models").factory("DSStateType",DSStateTypeFactory).run(function(DSStateType){}),DSStateTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function DSStateFactory($log,$q,DS,apiService){function load(deviceId){return apiService.send({method:"Devices.GetStateValues",params:{deviceId:deviceId}}).then(function(data){var states=data.values.map(function(state){return state.deviceId=deviceId,state});return DSState.inject(states),DSState.getAll()})}var DSState=DS.defineResource({endpoint:"states",idAttribute:"compoundId",name:"state",relations:{belongsTo:{device:{localField:"device",localKey:"deviceId",parent:!0}},hasOne:{stateType:{localField:"stateType",localKey:"stateTypeId"}}},computed:{compoundId:["deviceId","stateTypeId","value",function(deviceId,stateTypeId,value){return""+deviceId+"_"+stateTypeId}]},methods:{}});return angular.extend(DSState,{load:load}),DSState}angular.module("guh.models").factory("DSState",DSStateFactory).run(function(DSState){}),DSStateFactory.$inject=["$log","$q","DS","apiService"]}(),function(){"use strict";function DSSettingsFactory($log,LocalForage){LocalForage.localForageStore.registerAdapter("localForage",LocalForage.localForageAdapter,{"default":!0});var DSSettings=LocalForage.localForageStore.defineResource({name:"settings",relations:{hasOne:{serverInfo:{localField:"serverInfo",foreignKey:"settingsId"}},hasMany:{connection:{localField:"connections",foreignKey:"settingsId"}}}});return DSSettings}angular.module("guh.models").factory("DSSettings",DSSettingsFactory).run(function(DSSettings){}),DSSettingsFactory.$inject=["$log","LocalForage"]}(),function(){"use strict";function DSServerInfoFactory($log,LocalForage){LocalForage.localForageStore.registerAdapter("localForage",LocalForage.localForageAdapter,{"default":!0});var ServerInfo=LocalForage.localForageStore.defineResource({name:"serverInfo",relations:{belongsTo:{settings:{localField:"settings",foreignKey:"settingsId",parent:!0}}}});return ServerInfo}angular.module("guh.models").factory("DSServerInfo",DSServerInfoFactory).run(function(DSServerInfo){}),DSServerInfoFactory.$inject=["$log","LocalForage"]}(),function(){"use strict";function DSRuleFactory($log,$q,DS,apiService){function _loadDetails(ruleDescription){return apiService.send({method:"Rules.GetRuleDetails",params:{ruleId:ruleDescription.id}})}function load(){return apiService.send({method:"Rules.GetRules"}).then(function(data){return $q.all(data.ruleDescriptions.map(function(ruleDescription){return _loadDetails(ruleDescription).then(function(data){return DSRule.inject(data.rule),data.rule})}))}).then(function(rules){return DSRule.getAll()})}function add(rule){return apiService.send({method:"Rules.AddRule",params:rule})}function executeActions(){var self=this;return apiService.send({method:"Rules.ExecuteActions",params:{ruleId:self.id}})}function executeExitActions(){var self=this;return apiService.send({method:"Rules.ExecuteExitActions",params:{ruleId:self.id}})}function remove(){var self=this;return apiService.send({method:"Rules.RemoveRule",params:{ruleId:self.id}})}var DSRule=DS.defineResource({endpoint:"rules",idAttribute:"id",name:"rule",relations:{},computed:{},methods:{executeActions:executeActions,executeExitActions:executeExitActions,remove:remove}});return angular.extend(DSRule,{load:load,add:add}),DSRule}angular.module("guh.models").factory("DSRule",DSRuleFactory).run(function(DSRule){}),DSRuleFactory.$inject=["$log","$q","DS","apiService"]}(),function(){"use strict";function DSPluginFactory($log,$q,DS,apiService){function load(){return apiService.send({method:"Devices.GetPlugins"}).then(function(data){return DSPlugin.inject(data.plugins),DSPlugin.getAll()})}var DSPlugin=DS.defineResource({endpoint:"plugins",idAttribute:"id",name:"plugin",relations:{},computed:{},methods:{}});return angular.extend(DSPlugin,{load:load}),DSPlugin}angular.module("guh.models").factory("DSPlugin",DSPluginFactory).run(function(DSPlugin){}),DSPluginFactory.$inject=["$log","$q","DS","apiService"]}(),function(){"use strict";function DSParamTypeFactory($log,DS){var DSParamType=DS.defineResource({name:"paramType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"}}},computed:{},methods:{}});return DSParamType}angular.module("guh.models").factory("DSParamType",DSParamTypeFactory).run(function(DSParamType){}),DSParamTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function modelsHelper($log,$q,DS,File,app){function checkTemplateUrl(templateUrl){var pathElements=templateUrl.split("/"),file=pathElements.pop(),path=pathElements.join("/")+"/";if(void 0!==templateUrl&&""!==templateUrl){var fileExists=$q.when(File.checkFile(path,file)).then(function(fileExists){return fileExists?templateUrl:path+"template-not-available.html"});return fileExists}return path+"template-not-defined.html"}function setBasePath(){DS.defaults.basePath=app.apiUrl}var modelsHelper={checkTemplateUrl:checkTemplateUrl,setBasePath:setBasePath};return modelsHelper}angular.module("guh.models").factory("modelsHelper",modelsHelper),modelsHelper.$inject=["$log","$q","DS","File","app"]}(),function(){"use strict";function DSEventTypeFactory($log,DS){function _addUiData(resource,attrs){var paramTypes=attrs.paramTypes,phrase="When "+attrs.name;angular.isArray(paramTypes)&&0===paramTypes.length?attrs.phrase=phrase+" is detected":attrs.phrase=phrase+" is detected and parameters are"}function getParamDescriptor(paramType,value,operator){var paramDescriptor={};return paramDescriptor={name:paramType.name,operator:operator,value:value}}var DSEventType=DS.defineResource({endpoint:"eventtypes",idAttribute:"id",name:"eventType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId",parent:!0}}},computed:{},methods:{getParamDescriptor:getParamDescriptor},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSEventType}angular.module("guh.models").factory("DSEventType",DSEventTypeFactory).run(function(DSEventType){}),DSEventTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function DSDeviceFactory($log,$q,DS,apiService){function _createStates(resource,attrs){var deviceId=attrs.id,states=attrs.states;angular.forEach(states,function(state,index){state.deviceId=deviceId;var stateInstance=DS.createInstance("state",state);DS.inject("state",stateInstance),angular.isUndefined(attrs.states)&&(attrs.states=[]),attrs.states[index]=DS.get("state",""+deviceId+"_"+state.stateTypeId)})}function _removeStates(resource,attrs){var deviceId=attrs.id,states=attrs.states;angular.forEach(states,function(state,index){DS.eject("state",""+deviceId+"_"+state.stateTypeId)})}function load(){return apiService.send({method:"Devices.GetConfiguredDevices"}).then(function(data){return DSDevice.inject(data.devices),DSDevice.getAll()})}function getDescription(delimiter){var self=this,vendorName=self.deviceClass.vendor.name,deviceClassName=self.deviceClass.name||"";return delimiter=delimiter||"-",vendorName===deviceClassName?deviceClassName:vendorName+delimiter+deviceClassName}function pair(deviceClassId,deviceDescriptorId,deviceParams,name){var params={};return params.deviceClassId=deviceClassId||"",angular.isDefined(deviceDescriptorId)&&""!==deviceDescriptorId?params.deviceDescriptorId=deviceDescriptorId:params.deviceParams=deviceParams||[],angular.isDefined(name)&&(params.name=name),apiService.send({method:"Devices.PairDevice",params:params})}function confirmPairing(pairingTransactionId,secret){var params={};return params.pairingTransactionId=pairingTransactionId,secret&&(params.secret=secret),apiService.send({method:"Devices.ConfirmPairing",params:params})}function add(deviceClassId,deviceDescriptorId,deviceParams,name){var params={};return angular.isDefined(name)&&""!==name&&(params.name=name),angular.isDefined(deviceClassId)&&""!==deviceClassId&&(params.deviceClassId=deviceClassId),angular.isDefined(deviceDescriptorId)&&""!==deviceDescriptorId?params.deviceDescriptorId=deviceDescriptorId:angular.isDefined(deviceParams)&&deviceParams!==[]&&(params.deviceParams=deviceParams),apiService.send({method:"Devices.AddConfiguredDevice",params:params})}function edit(deviceId,deviceData){var device={};return deviceData=deviceData||{},device.deviceDescriptorId=deviceData.id||"",device.deviceParams=[],angular.forEach(deviceData.deviceParamTypes,function(deviceParamType){var deviceParam={};deviceParam.name=deviceParamType.name,deviceParam.value=deviceParamType.value,device.deviceParams.push(deviceParam)}),DSDevice.update(deviceId,{device:device})}function executeAction(actionType,params){var self=this,jsonRpcParams={actionTypeId:actionType.id,deviceId:self.id};return angular.isDefined(params)&&params!=={}&&(jsonRpcParams.params=params),apiService.send({method:"Actions.ExecuteAction",params:jsonRpcParams})}function remove(params){var self=this,jsonRpcParams={deviceId:self.id};return angular.isDefined(params)&&params!=={}&&angular.forEach(params,function(value,key){jsonRpcParams[key]=value}),apiService.send({method:"Devices.RemoveConfiguredDevice",params:jsonRpcParams})}function getEventDescriptor(eventType,paramDescriptors){var self=this,eventDescriptor={};return eventDescriptor.deviceId=self.id,eventDescriptor.eventTypeId=eventType.id,angular.isDefined(paramDescriptors)&&paramDescriptors.length>0&&(eventDescriptor.paramDescriptors=paramDescriptors),eventDescriptor}function getStateDescriptor(stateType,paramDescriptor){var self=this,stateDescriptor={};return stateDescriptor.deviceId=self.id,stateDescriptor.operator=paramDescriptor.operator,stateDescriptor.stateTypeId=stateType.id,stateDescriptor.value=paramDescriptor.value,stateDescriptor}function getAction(actionType,params){var self=this,action={},ruleActionParams=[];return ruleActionParams=actionType.getRuleActionParams(params),ruleActionParams.length>0&&(action.ruleActionParams=ruleActionParams),action.actionTypeId=actionType.id,action.deviceId=self.id,action}var DSDevice=DS.defineResource({endpoint:"devices",idAttribute:"id",name:"device",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"}}},computed:{},methods:{executeAction:executeAction,remove:remove,getDescription:getDescription,getEventDescriptor:getEventDescriptor,getStateDescriptor:getStateDescriptor,getAction:getAction},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_createStates(resource,attrs)})}else _createStates(resource,attrs)},afterEject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_removeStates(resource,attrs)})}else _removeStates(resource,attrs)}});return angular.extend(DSDevice,{load:load,add:add,edit:edit,pair:pair,confirmPairing:confirmPairing}),DSDevice}angular.module("guh.models").factory("DSDevice",DSDeviceFactory).run(function(DSDevice){}),DSDeviceFactory.$inject=["$log","$q","DS","apiService"]}(),function(){"use strict";function DSDeviceClassStateTypeFactory($log,DS){var DSDeviceClassStateType=DS.defineResource({name:"deviceClassStateType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},stateType:{localField:"stateType",localKey:"stateTypeId"}}}});return DSDeviceClassStateType}angular.module("guh.models").factory("DSDeviceClassStateType",DSDeviceClassStateTypeFactory).run(function(DSDeviceClassStateType){}),DSDeviceClassStateTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function DSDeviceClassFactory($log,$q,DS,_,apiService,modelsHelper,DSDeviceClassActionType,DSDeviceClassEventType,DSDeviceClassStateType){function load(){return apiService.send({method:"Devices.GetSupportedDevices"}).then(function(data){return DSDeviceClass.inject(data.deviceClasses),DSDeviceClass.getAll()})}function _getInputPath(name,filename){return"app/containers/thing-details/device-class-templates/"+filename+".html"}function _addUiTemplate(name){var templateName=name.toLowerCase().replace(/\s/g,"-").replace(/([.*+?^=!:${}()|\[\]\/\\])/g,""),templateUrl=_getInputPath(name,"device-class-"+templateName);return modelsHelper.checkTemplateUrl(templateUrl)}function _createDeviceClassActionsTypes(resource,attrs){var deviceClassActionTypes=DS.getAll("deviceClassActionType"),deviceClassEventTypes=DS.getAll("deviceClassEventType"),deviceClassStateTypes=DS.getAll("deviceClassStateType"),actionTypes=attrs.actionTypes,eventTypes=attrs.eventTypes,stateTypes=attrs.stateTypes,deviceClassId=attrs.id;angular.forEach(actionTypes,function(actionType){var actionTypeInstance=DS.createInstance("actionType",actionType);DS.inject("actionType",actionTypeInstance);var deviceClassActionTypesFiltered=deviceClassActionTypes.filter(function(deviceClassActionType){return deviceClassActionType.deviceClassId===deviceClassId&&deviceClassActionType.actionTypeId===actionType.id});if(angular.isArray(deviceClassActionTypesFiltered)&&0===deviceClassActionTypesFiltered.length){deviceClassActionTypesId+=1;var deviceClassActionTypeInstance=DS.createInstance("deviceClassActionType",{id:deviceClassActionTypesId,deviceClassId:deviceClassId,actionTypeId:actionType.id});DS.inject("deviceClassActionType",deviceClassActionTypeInstance)}}),angular.forEach(eventTypes,function(eventType){var eventTypeInstance=DS.createInstance("eventType",eventType);DS.inject("eventType",eventTypeInstance);var deviceClassEventTypesFiltered=deviceClassEventTypes.filter(function(deviceClassEventType){return deviceClassEventType.deviceClassId===deviceClassId&&deviceClassEventType.eventTypeId===eventType.id});if(angular.isArray(deviceClassEventTypesFiltered)&&0===deviceClassEventTypesFiltered.length){deviceClassEventTypesId+=1;var deviceClassEventTypeInstance=DS.createInstance("deviceClassEventType",{id:deviceClassEventTypesId,deviceClassId:deviceClassId,eventTypeId:eventType.id});DS.inject("deviceClassEventType",deviceClassEventTypeInstance)}}),angular.forEach(stateTypes,function(stateType){var stateTypeInstance=DS.createInstance("stateType",stateType);DS.inject("stateType",stateTypeInstance);var deviceClassStateTypesFiltered=deviceClassStateTypes.filter(function(deviceClassStateType){return deviceClassStateType.deviceClassId===deviceClassId&&deviceClassStateType.stateTypeId===stateType.id});if(angular.isArray(deviceClassStateTypesFiltered)&&0===deviceClassStateTypesFiltered.length){deviceClassStateTypesId+=1;var deviceClassStateTypeInstance=DS.createInstance("deviceClassStateType",{id:deviceClassStateTypesId,deviceClassId:deviceClassId,stateTypeId:stateType.id});DS.inject("deviceClassStateType",deviceClassStateTypeInstance)}})}function _mapStates(resource,attrs){var actionTypes=attrs.actionTypes,eventTypes=attrs.eventTypes,stateTypes=attrs.stateTypes,stateIds=_.pluck(stateTypes,"id");angular.forEach(actionTypes,function(actionType){_.contains(stateIds,actionType.id)?actionType.hasState=!0:actionType.hasState=!1}),angular.forEach(eventTypes,function(eventType){_.contains(stateIds,eventType.id)?eventType.hasState=!0:eventType.hasState=!1})}function discover(discoveryParams){var self=this;return apiService.send({method:"Devices.GetDiscoveredDevices",params:{deviceClassId:self.id,discoveryParams:discoveryParams}})}function getCreateMethod(){var self=this,basePath="app/components/create-thing/templates/",createMethodData=null;return self.createMethods.indexOf("CreateMethodDiscovery")>-1?createMethodData={title:"Discovery",template:basePath+"create-thing-discovery.html"}:self.createMethods.indexOf("CreateMethodUser")>-1?createMethodData={title:"User",template:basePath+"create-thing-user.html"}:self.createMethods.indexOf("CreateMethodAuto")>-1?createMethodData={title:"Auto",template:null}:$log.error("CreateMethod not implemented."),createMethodData}function getSetupMethod(){var self=this,basePath="app/components/setup-thing/templates/",setupMethodData={};switch(self.setupMethod){case"SetupMethodJustAdd":setupMethodData=null;break;case"SetupMethodDisplayPin":setupMethodData={title:"Display Pin",template:basePath+"setup-thing-display-pin.html"};break;case"SetupMethodEnterPin":setupMethodData={title:"Enter Pin",template:basePath+"setup-thing-enter-pin.html"};break;case"SetupMethodPushButton":setupMethodData={title:"Push Button",template:basePath+"setup-thing-push-button.html"};break;default:$log.error("SetupMethod not implemented.")}return setupMethodData}var deviceClassActionTypesId=0,deviceClassEventTypesId=0,deviceClassStateTypesId=0,DSDeviceClass=DS.defineResource({endpoint:"deviceclasses",idAttribute:"id",name:"deviceClass",relations:{belongsTo:{vendor:{localField:"vendor",localKey:"vendorId"}},hasMany:{deviceClassActionType:{localField:"deviceClassActionTypes",foreignKey:"deviceClassId"},deviceClassEventType:{localField:"deviceClassEventTypes",foreignKey:"deviceClassId"},deviceClassStateType:{localField:"deviceClassStateTypes",foreignKey:"deviceClassId"}}},computed:{templateUrl:["name",_addUiTemplate]},methods:{discover:discover,getCreateMethod:getCreateMethod,getSetupMethod:getSetupMethod},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_mapStates(resource,attrs),_createDeviceClassActionsTypes(resource,attrs)})}else _mapStates(resource,attrs),_createDeviceClassActionsTypes(resource,attrs)}});return DSDeviceClass.getAllActionTypes=function(deviceClassId){var deviceClassActionTypes=DSDeviceClassActionType.getAll(),deviceClassActionTypesFiltered=deviceClassActionTypes.filter(function(deviceClassActionType){return deviceClassActionType.deviceClassId===deviceClassId}),actionTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassActionTypesFiltered,function(deviceClassActionType){if(deviceClassActionType.deviceClassId===deviceClassId){var actionType=DS.get("actionType",deviceClassActionType.actionTypeId);actionTypes.push(actionType)}}),actionTypes},DSDeviceClass.getAllEventTypes=function(deviceClassId){var deviceClassEventTypes=DSDeviceClassEventType.getAll(),deviceClassEventTypesFiltered=deviceClassEventTypes.filter(function(deviceClassEventType){return deviceClassEventType.deviceClassId===deviceClassId}),eventTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassEventTypesFiltered,function(deviceClassEventType){if(deviceClassEventType.deviceClassId===deviceClassId){var eventType=DS.get("eventType",deviceClassEventType.eventTypeId);eventTypes.push(eventType)}}),eventTypes},DSDeviceClass.getAllStateTypes=function(deviceClassId){var deviceClassStateTypes=DSDeviceClassStateType.getAll(),deviceClassStateTypesFiltered=deviceClassStateTypes.filter(function(deviceClassStateType){return deviceClassStateType.deviceClassId===deviceClassId}),stateTypes=(DS.get("deviceClass",deviceClassId),[]);return angular.forEach(deviceClassStateTypesFiltered,function(deviceClassStateType){if(deviceClassStateType.deviceClassId===deviceClassId){var stateType=DS.get("stateType",deviceClassStateType.stateTypeId);stateTypes.push(stateType)}}),stateTypes},angular.extend(DSDeviceClass,{load:load}),DSDeviceClass}angular.module("guh.models").factory("DSDeviceClass",DSDeviceClassFactory).run(function(DSDeviceClass){}),DSDeviceClassFactory.$inject=["$log","$q","DS","_","apiService","modelsHelper","DSDeviceClassActionType","DSDeviceClassEventType","DSDeviceClassStateType"]}(),function(){"use strict";function DSDeviceClassEventTypeFactory($log,DS){var DSDeviceClassEventType=DS.defineResource({name:"deviceClassEventType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},eventType:{localField:"eventType",localKey:"eventTypeId"}}}});return DSDeviceClassEventType}angular.module("guh.models").factory("DSDeviceClassEventType",DSDeviceClassEventTypeFactory).run(function(DSDeviceClassEventType){}),DSDeviceClassEventTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function DSDeviceClassActionTypeFactory($log,DS){var DSDeviceClassActionType=DS.defineResource({name:"deviceClassActionType",relations:{belongsTo:{deviceClass:{localField:"deviceClass",localKey:"deviceClassId"},actionType:{localField:"actionType",localKey:"actionTypeId"}}}});return DSDeviceClassActionType}angular.module("guh.models").factory("DSDeviceClassActionType",DSDeviceClassActionTypeFactory).run(function(DSDeviceClassActionType){}),DSDeviceClassActionTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function DSConnectionFactory($log,LocalForage,cloudWebsocketService){function createTunnel(connectionId){return connectionId?cloudWebsocketService.send({method:"Connection.CreateTunnel",params:{connectionId:connectionId}}).then(function(tunnelData){return tunnelCreated=!0,DSConnection.create({id:tunnelData.tunnel.id,activationTimeStamp:tunnelData.tunnel.activationTimeStamp,clientConnection:tunnelData.tunnel.clientConnection,serverConnection:tunnelData.tunnel.serverConnection}).then(function(connection){return tunnelData.tunnel})["catch"](function(error){return error})})["catch"](function(error){return tunnelCreated=!1,error}):($log.error('Parameter "connectionId" missing.'),void(tunnelCreated=!1))}function isTunnelCreated(){return tunnelCreated}function getConnections(){return cloudWebsocketService.send({method:"Connection.GetConnections"})}LocalForage.localForageStore.registerAdapter("localForage",LocalForage.localForageAdapter,{"default":!0});var tunnelCreated=!1,DSConnection=LocalForage.localForageStore.defineResource({name:"connection",relations:{belongsTo:{settings:{localField:"settings",localKey:"settingsId",parent:!0}}}});return angular.extend(DSConnection,{getConnections:getConnections,createTunnel:createTunnel,isTunnelCreated:isTunnelCreated}),DSConnection}angular.module("guh.models").factory("DSConnection",DSConnectionFactory).run(function(DSConnection){}),DSConnectionFactory.$inject=["$log","LocalForage","cloudWebsocketService"]}(),function(){"use strict";function DSAuthenticationFactory($log,$q,LocalForage,cloudWebsocketService){function authenticateConnection(id,name,token,type){return cloudWebsocketService.send({method:"Authentication.Authenticate",params:{id:id,name:name,token:token,type:type}}).then(function(response){return response})["catch"](function(error){return connectionAuthenticated=!1,error})}function isAuthenticated(){return"cloudUser"===this.id&&cloudUserAuthenticated}LocalForage.localForageStore.registerAdapter("localForage",LocalForage.localForageAdapter,{"default":!0});var cloudUserAuthenticated=!1,connectionAuthenticated=!1,DSAuthentication=LocalForage.localForageStore.defineResource({name:"authentication",relations:{},methods:{isAuthenticated:isAuthenticated}});return angular.extend(DSAuthentication,{authenticateConnection:authenticateConnection}),DSAuthentication}angular.module("guh.models").factory("DSAuthentication",DSAuthenticationFactory).run(function(DSAuthentication){}),DSAuthenticationFactory.$inject=["$log","$q","LocalForage","cloudWebsocketService"]}(),function(){"use strict";function DSActionTypeFactory($log,DS){function _addUiData(resource,attrs){var paramTypes=attrs.paramTypes;attrs.phrase='Execute "'+attrs.name+'"',angular.isArray(paramTypes)&&paramTypes.length>0&&(attrs.phrase=attrs.phrase+" with parameters")}function getParams(){var self=this,params=[],paramTypes=self.paramTypes;return angular.forEach(paramTypes,function(paramType){params.push({name:paramType.name,value:paramType.value})}),params}function getRuleActionParams(params,actionParamType,eventParamType){var ruleActionParams=[];return angular.forEach(params,function(param){void 0!==actionParamType&&void 0!==eventParamType&&param.name===actionParamType.name?ruleActionParams.push({name:param.name,eventParamName:eventParamType.name,eventTypeId:eventParamType.eventDescriptor.eventTypeId}):ruleActionParams.push({name:param.name,value:param.value})}),ruleActionParams}var DSActionType=DS.defineResource({endpoint:"actiontypes",idAttribute:"id",name:"actionType",relations:{hasMany:{deviceClassActionType:{localField:"deviceClassActionTypes",foreignKey:"actionTypeId"}}},computed:{},methods:{getParams:getParams,getRuleActionParams:getRuleActionParams},afterInject:function(resource,attrs){if(angular.isArray(attrs)){var arrayOfAttrs=attrs;angular.forEach(arrayOfAttrs,function(attrs){_addUiData(resource,attrs)})}else _addUiData(resource,attrs)}});return DSActionType}angular.module("guh.models").factory("DSActionType",DSActionTypeFactory).run(function(DSActionType){}),DSActionTypeFactory.$inject=["$log","DS"]}(),function(){"use strict";function config($provide){$provide.decorator("$log",["$injector","$delegate","guhLogging",function($injector,$delegate,guhLogging){function _applyCallbacks(logType,args){var logTypeData=guhLogging.getLogType(logType);angular.forEach(logTypeData.preCallbacks,function(preCallbackProvider){var preCallback=$injector.get(preCallbackProvider);preCallback.call(preCallback,{type:logType,args:args})}),guhLogging.isEnhanced(logType)?($delegate[logType].apply($delegate,args),guhLogging[logType].apply(null,args)):$delegate[logType].apply($delegate,args),angular.forEach(logTypeData.postCallbacks,function(postCallbackProvider){var postCallback=$injector.get(postCallbackProvider);postCallback.call(postCallback,{type:logType,args:args})})}function log(){var args=arguments;_applyCallbacks("log",args)}function info(){var args=arguments;_applyCallbacks("info",args)}function warn(){var args=arguments;_applyCallbacks("warn",args)}function error(){var args=arguments;_applyCallbacks("error",args)}var decorator={log:log,info:info,warn:warn,error:error};return decorator}])}angular.module("guh.logging",["guh.logging.hooks"]).config(config),config.$inject=["$provide"]}(),function(){"use strict";function Logging($injector){function _addHooks(prePost,logTypes,hooks){try{if(angular.isUndefined(logTypes)||null===logTypes||!angular.isString(logTypes))throw'Wrong argument type. The argument "logTypes" should be a comma seperated String.';if(angular.isDefined(hooks)&&null!==hooks&&!angular.isString(hooks))throw'Wrong argument type. The argument "hooks" should be a comma seperated String.'}catch(error){return error}var logTypesArray=logTypes.replace(/\s+/g,"").split(","),hooksArray=hooks.replace(/\s+/g,"").split(","),logTypeCallbacks=[];angular.forEach(hooksArray,function(hook){angular.isDefined(_hooks[hook])&&null!==_hooks[hook]&&logTypeCallbacks.push(_hooks[hook])}),angular.forEach(_logTypes,function(_logType){_logType[prePost+"Callbacks"]=[]}),angular.forEach(logTypesArray,function(logType){angular.isDefined(_logTypes[logType])&&(_logTypes[logType][prePost+"Callbacks"]=logTypeCallbacks)})}function $get(){function isEnhanced(logType){return!(!angular.isDefined(_logTypes[logType])||!angular.isDefined(_logTypes[logType].enhanced))&&_logTypes[logType].enhanced;
}function log(){}function info(){}function warn(){}function error(){}function getLogType(logType){return _logTypes[logType]}var service={isEnhanced:isEnhanced,log:log,info:info,warn:warn,error:error,getLogType:getLogType};return service}function enhance(logTypes){try{if(angular.isDefined(logTypes)&&null!==logTypes&&!angular.isString(logTypes))throw'Wrong argument type. The argument "logTypes" should be a comma seperated String.'}catch(error){return error}var logTypesArray=[];angular.isString(logTypes)?(logTypesArray=logTypes.replace(/\s+/g,"").split(","),angular.forEach(_logTypes,function(_logType){_logType.enhanced=!1}),angular.forEach(logTypesArray,function(logType){angular.isDefined(_logTypes[logType])&&(_logTypes[logType].enhanced=!0)})):angular.forEach(_logTypes,function(_logType){_logType.enhanced=!0})}function before(logTypes,hooks){_addHooks("pre",logTypes,hooks)}function after(logTypes,hooks){_addHooks("post",logTypes,hooks)}function decorate(message){}var _logTypes={log:{},info:{},warn:{},error:{}},_hooks={http:"guhLoggingHttpHook",broadcast:"guhLoggingBroadcastHook",websocket:null},provider={$get:$get,enhance:enhance,before:before,after:after,decorate:decorate};return provider}angular.module("guh.logging").provider("guhLogging",Logging),Logging.$inject=["$injector"]}(),function(){"use strict";function config(){}angular.module("guh.connection",[]).config(config),config.$inject=[]}(),function(){"use strict";function websocketService($log,$rootScope,$q,$timeout){function close(){ws&&(ws.close(),ws=null)}function connect(url){ws||(angular.isUndefined(url)&&$log.error("guh.api.websocketService:factory","Missing argument: url"),ws=new WebSocket(url),connectionTimer=$timeout(function(){ws.close(),ws=null},2e3),ws.onopen=function(event){connectionTimer&&$timeout.cancel(connectionTimer),$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnected","Successful connected to guh.")})},ws.onclose=function(event){1006===event.code?$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnectionError","There was an error connecting to guh.")}):$rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnectionLost","The app has lost the connection to guh. Please check if you are connected to your network and if guh is running correctly.")})},ws.onerror=function(event){return $rootScope.$apply(function(){$rootScope.$broadcast("WebsocketConnectionError","There was an error connecting to guh.")}),event},ws.onmessage=function(event){var response=angular.fromJson(event.data);websocketService.onmessage(response)})}function reconnect(url){websocketService.close(),websocketService.connect(url)}function send(request){ws.send(angular.toJson(request))}var connectionTimer,ws=null,websocketService={close:close,connect:connect,reconnect:reconnect,send:send,onmessage:angular.noop};return websocketService}angular.module("guh.connection").factory("websocketService",websocketService),websocketService.$inject=["$log","$rootScope","$q","$timeout"]}(),function(){"use strict";function localWebsocketService($log,$rootScope,$q,cloudService,websocketService){function _onmessage(response){localWebsocketService.onmessage(response)}function _getOnMessageCallback(){return _onmessage}function send(request){websocketService.send(request)}var localWebsocketService={send:send,onmessage:angular.noop,getOnMessageCallback:_getOnMessageCallback};return localWebsocketService}angular.module("guh.connection").factory("localWebsocketService",localWebsocketService),localWebsocketService.$inject=["$log","$rootScope","$q","cloudService","websocketService"]}(),function(){"use strict";function cloudWebsocketService($log,$rootScope,$q,cloudService,websocketService){function _getRequestId(){return currentRequestId+=1,currentRequestId>1e4&&(currentRequestId=0),currentRequestId}function _onmessage(response){angular.isDefined(response.notification)?_notificationHandler(response):angular.isDefined(response.server)&&angular.isDefined(response.version)?$rootScope.$apply(function(){$rootScope.$broadcast("InitialHandshake",response)}):angular.isDefined(response.id)&&_responseHandler(response)}function _getOnMessageCallback(){return _onmessage}function _notificationHandler(response){var notification=response.notification;switch(notification){case"Connection.DataReceived":angular.isDefined(response.params)&&angular.isDefined(response.params.tunnelId)&&response.params.tunnelId===cloudService.getTunnelId()&&angular.isDefined(response.params.data)&&cloudWebsocketService.onmessage(response.params.data)}}function _responseHandler(response){"success"===response.status?angular.isDefined(response.params.authenticationError)&&"AuthenticationErrorSuccess"!==response.params.authenticationError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):angular.isDefined(response.params.connectionError)&&"ConnectionErrorNoError"!==response.params.connectionError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):$rootScope.$apply(callbacks[response.id].callback.resolve(response.params)):$rootScope.$apply(callbacks[response.id].callback.reject(response)),delete callbacks[response.id]}function send(request){var defer=$q.defer(),requestId=_getRequestId(),tunnelId=cloudService.getTunnelId();return callbacks[requestId]={time:new Date,callback:defer,request:request},angular.isDefined(tunnelId)?request={id:requestId,method:"Connection.SendData",params:{data:request,tunnelId:tunnelId}}:request.id=requestId,websocketService.send(request),defer.promise}var currentRequestId=0,callbacks={},cloudWebsocketService={send:send,onmessage:angular.noop,getOnMessageCallback:_getOnMessageCallback};return cloudWebsocketService}angular.module("guh.connection").factory("cloudWebsocketService",cloudWebsocketService),cloudWebsocketService.$inject=["$log","$rootScope","$q","cloudService","websocketService"]}(),function(){"use strict";function config(){}angular.module("guh.cloud",[]).config(config),config.$inject=[]}(),function(){"use strict";function Cloud(){function $get($log,$q,$http){function login(username,password){var protocol=provider.ssl?"https":"http";return $http({method:"POST",url:protocol+"://"+provider.baseUrl+provider.loginUrl,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:function(obj){var str=[];for(var p in obj)str.push(encodeURIComponent(p)+"="+encodeURIComponent(obj[p]));return str.join("&")},data:{grant_type:grantType,username:username,password:password}}).then(function(response){if(angular.isDefined(response.data)){var data=response.data;return authenticated=!0,data}return $q.reject('Field "data" missing in response.')},function(error){return authenticated=!1,error})}function logout(){$log.log("Cloud.logout")}function isAuthenticated(){return authenticated}function getTunnelId(){return tunnelId}function setTunnelId(id){tunnelId=id}var tunnelId,authenticated=!1,service={login:login,logout:logout,isAuthenticated:isAuthenticated,getTunnelId:getTunnelId,setTunnelId:setTunnelId};return service}var grantType="password",provider={ssl:!0,baseUrl:"",loginUrl:"/auth/login",signupUrl:"/auth/signup",$get:$get};return provider}angular.module("guh.cloud").provider("cloudService",Cloud),Cloud.$inject=[]}(),function(){"use strict";function config(){}angular.module("guh.api",[]).config(config),config.$inject=[]}(),function(){"use strict";function apiService(){function $get($log,$rootScope,$q,cloudService,localWebsocketService,cloudWebsocketService,websocketService,DS){function _getRequestId(){return currentRequestId+=1,currentRequestId>1e4&&(currentRequestId=0),currentRequestId}function _onmessage(response){angular.isDefined(response.notification)?_notificationHandler(response):angular.isDefined(response.server)&&angular.isDefined(response.version)?$rootScope.$apply(function(){$rootScope.$broadcast("InitialHandshake",response)}):angular.isDefined(response.id)&&_responseHandler(response)}function _notificationHandler(response){var notification=response.notification;switch(notification){case"Devices.DeviceAdded":var deviceId=response.params.device.id,device=DS.get("device",deviceId);if(angular.isUndefined(device)){var injectedItem=DS.inject("device",response.params.device);DS.is("device",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.deviceClass.name+" was added.")}break;case"Devices.DeviceRemoved":var deviceId=response.params.deviceId,ejectedItem=DS.eject("device",deviceId);angular.isDefined(ejectedItem)&&$rootScope.$broadcast("ReloadView","Device was removed.",ejectedItem);break;case"Devices.StateChanged":var deviceId=response.params.deviceId,stateTypeId=response.params.stateTypeId,value=response.params.value;DS.inject("state",{id:""+deviceId+"_"+stateTypeId,deviceId:deviceId,stateTypeId:stateTypeId,value:value});break;case"Rules.RuleAdded":var ruleId=response.params.rule.id,rule=DS.get("rule",ruleId);if(angular.isUndefined(rule)){var injectedItem=DS.inject("rule",response.params.rule);DS.is("rule",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.name+" was added.")}break;case"Rules.ConfigurationChanged":var rule=response.params.rule,injectedItem=DS.inject("rule",rule);DS.is("rule",injectedItem)&&$rootScope.$broadcast("ReloadView",injectedItem.name+" was updated.");break;case"Rules.RuleRemoved":var ruleId=response.params.ruleId,ejectedItem=DS.eject("rule",ruleId);angular.isDefined(ejectedItem)&&$rootScope.$broadcast("ReloadView","Rule was removed.");break;default:$log.warn("apiService:notification",'Notification "'+notification+'" not handled.',response)}}function _responseHandler(response){"success"===response.status?angular.isDefined(response.params.deviceError)&&"DeviceErrorNoError"!==response.params.deviceError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):angular.isDefined(response.params.loggingError)&&"LoggingErrorNoError"!==response.params.loggingError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):angular.isDefined(response.params.ruleError)&&"RuleErrorNoError"!==response.params.ruleError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):angular.isDefined(response.params.connectionError)&&"ConnectionErrorNoError"!==response.params.connectionError?$rootScope.$apply(callbacks[response.id].callback.reject(response.params)):$rootScope.$apply(callbacks[response.id].callback.resolve(response.params)):$rootScope.$apply(callbacks[response.id].callback.reject(response)),delete callbacks[response.id]}function send(request){var defer=$q.defer(),requestId=_getRequestId(),tunnelId=cloudService.getTunnelId();return request.id=requestId,callbacks[requestId]={time:new Date,callback:defer,request:request},angular.isDefined(tunnelId)?cloudWebsocketService.send(request):localWebsocketService.send(request),defer.promise}var currentRequestId=0,callbacks={},apiService={send:send};return"cloudWebsocket"===apiServiceProvider.connectionType?(cloudWebsocketService.onmessage=_onmessage,websocketService.onmessage=cloudWebsocketService.getOnMessageCallback()):localWebsocketService.onmessage=_onmessage,apiService}var apiServiceProvider={connectionType:"localWebsocketService",$get:$get};return apiServiceProvider}angular.module("guh.api").provider("apiService",apiService),apiService.$inject=[]}();
//# sourceMappingURL=guh-libjs.min.js.map
